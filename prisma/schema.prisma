generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

model CostCenter {
  id        Int        @id @default(autoincrement())
  name      String     @unique
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  Category  Category[]

  @@map("costCenter")
}

model Category {
  id           Int           @id @default(autoincrement())
  name         String        @unique
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  costcenterid Int
  costcenter   CostCenter    @relation(fields: [costcenterid], references: [id])
  Subcategory  Subcategory[]

  @@map("categories")
}

model Group {
  id        String    @id @default(cuid())
  name      String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  users     User[]
  Expense   Expense[]

  @@map("groups")
}

model PaymentType {
  id        Int       @id @default(autoincrement())
  name      String    @unique
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  Expense   Expense[]

  @@map("paymentTypes")
}

model Subcategory {
  id         Int       @id @default(autoincrement())
  name       String    @unique
  categoryId Int
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  category   Category  @relation(fields: [categoryId], references: [id])
  Expense    Expense[]

  @@map("subcategories")
}

model User {
  id         String   @id @default(cuid())
  name       String
  email      String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  groupId    String
  firstLogin Int      @default(1)
  sub        String   @unique
  picture    String?
  Group      Group    @relation(fields: [groupId], references: [id])

  @@map("users")
}

model Expense {
  id            String   @id @default(cuid())
  description   String
  status        String
  amount        Decimal
  paymentTypeId Int
  expenseOf     String
  groupId       String
  bankAccountId String
  subcategoryId Int
  dueDate       DateTime
  createdAt     DateTime @default(now())

  subcategory     Subcategory @relation(fields: [subcategoryId], references: [id])
  withdrawAccount BankAccount @relation(fields: [bankAccountId], references: [id])
  paymentType     PaymentType @relation(fields: [paymentTypeId], references: [id])
  group           Group       @relation(fields: [groupId], references: [id])

  @@map("expenses")
}

model BankAccount {
  id        String    @id @default(cuid())
  bankName  String?
  Expense   Expense[]
  createdAt DateTime  @default(now())
}
